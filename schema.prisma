datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profilePhoto  String?  // S3 path
  photoGallery  String[]?
  handicap      Float?
  age           Int?
  gender        Boolean?
  country       String?
  province      String?
  city          String?
  preferences   PreferenceSet? @relation(fields: [preferenceSetId], references: [preferenceSetId])
  preferenceSetId String?
}
 
model PreferenceSet {
  preferenceSetId            String   @id @default(cuid())
  distanceRange              Float?
  preferredCourses           String[]?
  similarAge                 Boolean?
  sameGender                 Boolean?
  playWithSimilarHandicap    Boolean?
  teeBoxes                   Int? // Tips | Blue | White | Red
  cart                       Int? // Yes | No | Doesn’t Matter
  timeOfDay                  Int[]? // Morning | Afternoon | Evening
  weatherPreference          Int[]? // Rain | Overcast | Sunny
  paceOfPlay                 Int[]? // Slow | Normal Speed | Fast
  conversationLevel          Int[]? // Quiet | Doesn’t matter | Chatty
  drinking                   Boolean?
  okayWithPartnerDrinking    Boolean?
  smoking                    Boolean?
  okayWithPartnerSmoking     Boolean?
  music                      Boolean?
  musicPreference            Int[]? // Various genres
  wager                      Boolean?
  wagerPreference            String?
  user                       User?   @relation(fields: [userId], references: [id])
  userId                     String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
